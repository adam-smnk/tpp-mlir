import subprocess

def has_min_compute(compute_cap):
    # detection not working on Windows
    if sys.platform in ['win32']:
        return "win false"

    # By default the first device is used so query that one
    gpu_id = 0

    try:
        cmd = subprocess.Popen(
            ['nvidia-smi', f'--id={gpu_id}', '--query-gpu=compute_cap',
             '--format=csv,noheader'], stdout=subprocess.PIPE)
    except OSError:
        return "os error"

    out = cmd.stdout.read().decode('ascii')
    cmd.wait()

    if out == "":
        return "empty"

    gpu_sm = float(out)

    return gpu_sm >= compute_cap

def supports_wmma():
    # detection not working on Windows
    if sys.platform in ['win32']:
        return False

    try:
        cmd1 = subprocess.Popen(
            ['vulkaninfo', '--help'], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    except OSError:
        return False

    help_out = out = cmd1.stdout.read().decode('ascii')
    cmd1.wait()

    is_new_vulkan = '-o <filename>' in help_out

    # By default the first device is used so query that one
    gpu_id = 0

    try:
        if is_new_vulkan:
            cmd2 = subprocess.Popen(
                ['vulkaninfo', f'--json={gpu_id}', '-o', '/dev/stdout'], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
        else:
            cmd2 = subprocess.Popen(
                ['vulkaninfo', f'--json={gpu_id}'], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    except OSError:
        return False

    out = cmd2.stdout.read().decode('ascii')
    cmd2.wait()

    # It is difficult to query for specific device properties in Vulkan.
    # Instead, make a simple check to see if the current device is one of those
    # we expect to have all the necessary features.

    # For Intel, it can be any discrete GPU.
    if '"deviceName": "Intel' in out:
        return '"deviceType": "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU"' in out

    # For Nvidia, it has to be sufficiently modern GPU as tensor cores (wmma)
    # are only available in newer device generations.
    wmma_min_sm = 7.0
    if '"deviceName": "NVIDIA' in out:
        return has_min_compute(wmma_min_sm)

    return False

if not supports_wmma():
    config.unsupported = True
